//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace jg.Editor.NopService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderError", Namespace="http://schemas.datacontract.org/2004/07/Nop.Plugin.Misc.WebServices")]
    [System.SerializableAttribute()]
    public partial class OrderError : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrderId {
            get {
                return this.OrderIdField;
            }
            set {
                if ((this.OrderIdField.Equals(value) != true)) {
                    this.OrderIdField = value;
                    this.RaisePropertyChanged("OrderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Nop.Plugin.Misc.WebServices", ConfigurationName="NopService.INopService")]
    public interface INopService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetPaymentMethod", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetPaymentMethodResponse")]
        System.Data.DataSet GetPaymentMethod(string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/ExecuteDataSet", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/ExecuteDataSetResponse")]
        System.Data.DataSet ExecuteDataSet(string[] sqlStatements, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/ExecuteNonQuery", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/ExecuteNonQueryResponse")]
        void ExecuteNonQuery(string sqlStatement, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/ExecuteScalar", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/ExecuteScalarResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(jg.Editor.NopService.OrderError[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(jg.Editor.NopService.OrderError))]
        object ExecuteScalar(string sqlStatement, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/DeleteOrders", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/DeleteOrdersResponse")]
        jg.Editor.NopService.OrderError[] DeleteOrders(int[] ordersId, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AddOrderNote", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AddOrderNoteResponse")]
        void AddOrderNote(int orderId, string note, bool displayToCustomer, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/UpdateOrderBillingInfo", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/UpdateOrderBillingInfoResponse")]
        void UpdateOrderBillingInfo(int orderId, string firstName, string lastName, string phone, string email, string fax, string company, string address1, string address2, string city, string region, string country, string postalCode, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/UpdateOrderShippingInfo", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/UpdateOrderShippingInfoResponse")]
        void UpdateOrderShippingInfo(int orderId, string firstName, string lastName, string phone, string email, string fax, string company, string address1, string address2, string city, string region, string country, string postalCode, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/SetOrderPaymentPaid", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/SetOrderPaymentPaidResponse")]
        void SetOrderPaymentPaid(int orderId, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/SetOrderPaymentPaidWithMethod", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/SetOrderPaymentPaidWithMethodResponse")]
        void SetOrderPaymentPaidWithMethod(int orderId, string paymentMethodName, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/SetOrderPaymentPending", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/SetOrderPaymentPendingResponse")]
        void SetOrderPaymentPending(int orderId, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/SetOrderPaymentRefund", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/SetOrderPaymentRefundResponse")]
        void SetOrderPaymentRefund(int orderId, bool offline, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/SetOrdersStatusCanceled", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/SetOrdersStatusCanceledResponse")]
        jg.Editor.NopService.OrderError[] SetOrdersStatusCanceled(int[] ordersId, string usernameOrEmail, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/InsertPicture", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/InsertPictureResponse")]
        int InsertPicture(string name, byte[] pic);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/InsertAuditing", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/InsertAuditingResponse")]
        int InsertAuditing(string xmlInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/InsertAuditingPicutre", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/InsertAuditingPicutreResponse")]
        int InsertAuditingPicutre(int auditingId, int pictureId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetUrl", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetUrlResponse")]
        string GetUrl(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/Connect", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/ConnectResponse")]
        int Connect();
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/Login", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/LoginResponse")]
        string Login(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/Register", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/RegisterResponse")]
        int Register(string registerInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/UpLoadProductInfo", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/UpLoadProductInfoResponse")]
        int UpLoadProductInfo(string productXml, string[] picsname, byte[][] pics);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/UpLoadFile", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/UpLoadFileResponse")]
        int UpLoadFile(int auditId, string fileName, int startLocation, byte[] file);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/UpLoadFileResource", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/UpLoadFileResourceResponse")]
        int UpLoadFileResource(int auditId, string resourceName, int startLocation, byte[] resource);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetCategory", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetCategoryResponse")]
        string GetCategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetAuditInfo", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetAuditInfoResponse")]
        string GetAuditInfo(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetOrdersByUser", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetOrdersByUserResponse")]
        string GetOrdersByUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetPictureByOrderId", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetPictureByOrderIdResponse")]
        byte[] GetPictureByOrderId(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetPictureByChatperId", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetPictureByChatperIdResponse")]
        byte[] GetPictureByChatperId(int chapterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetUrlInfo", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetUrlInfoResponse")]
        string GetUrlInfo(int productId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetDownUrlByChapterId", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetDownUrlByChapterIdResponse")]
        string GetDownUrlByChapterId(int userId, int chapterId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetOrderByGuid", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetOrderByGuidResponse")]
        string GetOrderByGuid(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetOrderById", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetOrderByIdResponse")]
        string GetOrderById(int orderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetProductInfoList", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetProductInfoListResponse")]
        string GetProductInfoList();
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetALiYunKeyId", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetALiYunKeyIdResponse")]
        byte[] GetALiYunKeyId(string userPublicKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetALiYunKeySecret", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetALiYunKeySecretResponse")]
        byte[] GetALiYunKeySecret(string userPublicKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/GetBucketName", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/GetBucketNameResponse")]
        byte[] GetBucketName(string userPublicKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/UpLoadProductChapterInfo", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/UpLoadProductChapterInfoResponse")]
        int UpLoadProductChapterInfo(string chapterXml, string[] picsname, byte[][] pics);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AppGetProductFire", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AppGetProductFireResponse")]
        string AppGetProductFire(string pageInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AppGetProductNew", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AppGetProductNewResponse")]
        string AppGetProductNew(string pageInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AppGetProductHome", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AppGetProductHomeResponse")]
        string AppGetProductHome(string pageInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/Test", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/TestResponse")]
        string Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AppGetCategory", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AppGetCategoryResponse")]
        string AppGetCategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AppGetProductByCateforyId", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AppGetProductByCateforyIdResponse")]
        string AppGetProductByCateforyId(string categoryinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AppLogin", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AppLoginResponse")]
        string AppLogin(string userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AppRegister", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AppRegisterResponse")]
        string AppRegister(string registerInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AppChangePassword", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AppChangePasswordResponse")]
        string AppChangePassword(string userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AppSearchProduct", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AppSearchProductResponse")]
        string AppSearchProduct(string searchinfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AppGetProductInfoById", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AppGetProductInfoByIdResponse")]
        string AppGetProductInfoById(string productid);
        
        [System.ServiceModel.OperationContractAttribute(Action="Nop.Plugin.Misc.WebServices/INopService/AppGetDownUrlByChapterId", ReplyAction="Nop.Plugin.Misc.WebServices/INopService/AppGetDownUrlByChapterIdResponse")]
        string AppGetDownUrlByChapterId(string chapterid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INopServiceChannel : jg.Editor.NopService.INopService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NopServiceClient : System.ServiceModel.ClientBase<jg.Editor.NopService.INopService>, jg.Editor.NopService.INopService {
        
        public NopServiceClient() {
        }
        
        public NopServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NopServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NopServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NopServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet GetPaymentMethod(string usernameOrEmail, string userPassword) {
            return base.Channel.GetPaymentMethod(usernameOrEmail, userPassword);
        }
        
        public System.Data.DataSet ExecuteDataSet(string[] sqlStatements, string usernameOrEmail, string userPassword) {
            return base.Channel.ExecuteDataSet(sqlStatements, usernameOrEmail, userPassword);
        }
        
        public void ExecuteNonQuery(string sqlStatement, string usernameOrEmail, string userPassword) {
            base.Channel.ExecuteNonQuery(sqlStatement, usernameOrEmail, userPassword);
        }
        
        public object ExecuteScalar(string sqlStatement, string usernameOrEmail, string userPassword) {
            return base.Channel.ExecuteScalar(sqlStatement, usernameOrEmail, userPassword);
        }
        
        public jg.Editor.NopService.OrderError[] DeleteOrders(int[] ordersId, string usernameOrEmail, string userPassword) {
            return base.Channel.DeleteOrders(ordersId, usernameOrEmail, userPassword);
        }
        
        public void AddOrderNote(int orderId, string note, bool displayToCustomer, string usernameOrEmail, string userPassword) {
            base.Channel.AddOrderNote(orderId, note, displayToCustomer, usernameOrEmail, userPassword);
        }
        
        public void UpdateOrderBillingInfo(int orderId, string firstName, string lastName, string phone, string email, string fax, string company, string address1, string address2, string city, string region, string country, string postalCode, string usernameOrEmail, string userPassword) {
            base.Channel.UpdateOrderBillingInfo(orderId, firstName, lastName, phone, email, fax, company, address1, address2, city, region, country, postalCode, usernameOrEmail, userPassword);
        }
        
        public void UpdateOrderShippingInfo(int orderId, string firstName, string lastName, string phone, string email, string fax, string company, string address1, string address2, string city, string region, string country, string postalCode, string usernameOrEmail, string userPassword) {
            base.Channel.UpdateOrderShippingInfo(orderId, firstName, lastName, phone, email, fax, company, address1, address2, city, region, country, postalCode, usernameOrEmail, userPassword);
        }
        
        public void SetOrderPaymentPaid(int orderId, string usernameOrEmail, string userPassword) {
            base.Channel.SetOrderPaymentPaid(orderId, usernameOrEmail, userPassword);
        }
        
        public void SetOrderPaymentPaidWithMethod(int orderId, string paymentMethodName, string usernameOrEmail, string userPassword) {
            base.Channel.SetOrderPaymentPaidWithMethod(orderId, paymentMethodName, usernameOrEmail, userPassword);
        }
        
        public void SetOrderPaymentPending(int orderId, string usernameOrEmail, string userPassword) {
            base.Channel.SetOrderPaymentPending(orderId, usernameOrEmail, userPassword);
        }
        
        public void SetOrderPaymentRefund(int orderId, bool offline, string usernameOrEmail, string userPassword) {
            base.Channel.SetOrderPaymentRefund(orderId, offline, usernameOrEmail, userPassword);
        }
        
        public jg.Editor.NopService.OrderError[] SetOrdersStatusCanceled(int[] ordersId, string usernameOrEmail, string userPassword) {
            return base.Channel.SetOrdersStatusCanceled(ordersId, usernameOrEmail, userPassword);
        }
        
        public int InsertPicture(string name, byte[] pic) {
            return base.Channel.InsertPicture(name, pic);
        }
        
        public int InsertAuditing(string xmlInfo) {
            return base.Channel.InsertAuditing(xmlInfo);
        }
        
        public int InsertAuditingPicutre(int auditingId, int pictureId) {
            return base.Channel.InsertAuditingPicutre(auditingId, pictureId);
        }
        
        public string GetUrl(string filename) {
            return base.Channel.GetUrl(filename);
        }
        
        public int Connect() {
            return base.Channel.Connect();
        }
        
        public string Login(string userName, string password) {
            return base.Channel.Login(userName, password);
        }
        
        public int Register(string registerInfo) {
            return base.Channel.Register(registerInfo);
        }
        
        public int UpLoadProductInfo(string productXml, string[] picsname, byte[][] pics) {
            return base.Channel.UpLoadProductInfo(productXml, picsname, pics);
        }
        
        public int UpLoadFile(int auditId, string fileName, int startLocation, byte[] file) {
            return base.Channel.UpLoadFile(auditId, fileName, startLocation, file);
        }
        
        public int UpLoadFileResource(int auditId, string resourceName, int startLocation, byte[] resource) {
            return base.Channel.UpLoadFileResource(auditId, resourceName, startLocation, resource);
        }
        
        public string GetCategory() {
            return base.Channel.GetCategory();
        }
        
        public string GetAuditInfo(int userId) {
            return base.Channel.GetAuditInfo(userId);
        }
        
        public string GetOrdersByUser(int userId) {
            return base.Channel.GetOrdersByUser(userId);
        }
        
        public byte[] GetPictureByOrderId(int orderId) {
            return base.Channel.GetPictureByOrderId(orderId);
        }
        
        public byte[] GetPictureByChatperId(int chapterId) {
            return base.Channel.GetPictureByChatperId(chapterId);
        }
        
        public string GetUrlInfo(int productId, int userId) {
            return base.Channel.GetUrlInfo(productId, userId);
        }
        
        public string GetDownUrlByChapterId(int userId, int chapterId) {
            return base.Channel.GetDownUrlByChapterId(userId, chapterId);
        }
        
        public string GetOrderByGuid(string guid) {
            return base.Channel.GetOrderByGuid(guid);
        }
        
        public string GetOrderById(int orderId) {
            return base.Channel.GetOrderById(orderId);
        }
        
        public string GetProductInfoList() {
            return base.Channel.GetProductInfoList();
        }
        
        public byte[] GetALiYunKeyId(string userPublicKey) {
            return base.Channel.GetALiYunKeyId(userPublicKey);
        }
        
        public byte[] GetALiYunKeySecret(string userPublicKey) {
            return base.Channel.GetALiYunKeySecret(userPublicKey);
        }
        
        public byte[] GetBucketName(string userPublicKey) {
            return base.Channel.GetBucketName(userPublicKey);
        }
        
        public int UpLoadProductChapterInfo(string chapterXml, string[] picsname, byte[][] pics) {
            return base.Channel.UpLoadProductChapterInfo(chapterXml, picsname, pics);
        }
        
        public string AppGetProductFire(string pageInfo) {
            return base.Channel.AppGetProductFire(pageInfo);
        }
        
        public string AppGetProductNew(string pageInfo) {
            return base.Channel.AppGetProductNew(pageInfo);
        }
        
        public string AppGetProductHome(string pageInfo) {
            return base.Channel.AppGetProductHome(pageInfo);
        }
        
        public string Test() {
            return base.Channel.Test();
        }
        
        public string AppGetCategory() {
            return base.Channel.AppGetCategory();
        }
        
        public string AppGetProductByCateforyId(string categoryinfo) {
            return base.Channel.AppGetProductByCateforyId(categoryinfo);
        }
        
        public string AppLogin(string userInfo) {
            return base.Channel.AppLogin(userInfo);
        }
        
        public string AppRegister(string registerInfo) {
            return base.Channel.AppRegister(registerInfo);
        }
        
        public string AppChangePassword(string userInfo) {
            return base.Channel.AppChangePassword(userInfo);
        }
        
        public string AppSearchProduct(string searchinfo) {
            return base.Channel.AppSearchProduct(searchinfo);
        }
        
        public string AppGetProductInfoById(string productid) {
            return base.Channel.AppGetProductInfoById(productid);
        }
        
        public string AppGetDownUrlByChapterId(string chapterid) {
            return base.Channel.AppGetDownUrlByChapterId(chapterid);
        }
    }
}
